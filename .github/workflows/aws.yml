name: Deploy to EC2 (master)

on:
  push:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  deploy:
    # Ensure this environment is configured in your GitHub repo settings if you want Environment-scoped secrets
    # environment: production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Preflight: Check required secrets
        # Use 'exit 1' for clear failure message
        run: | 
          echo "Checking for required secrets..."
          test -n "${{ secrets.EC2_HOST }}" || { echo "::error::Missing secret EC2_HOST. Deployment stopped."; exit 1; }
          test -n "${{ secrets.EC2_USER }}" || { echo "::error::Missing secret EC2_USER. Deployment stopped."; exit 1; }
          test -n "${{ secrets.SSH_PRIVATE_KEY }}" || { echo "::error::Missing secret SSH_PRIVATE_KEY. Deployment stopped."; exit 1; }
          echo "All secrets present."

      - name: Add EC2 host key to known_hosts
        # The 'ssh-keyscan' command can sometimes hang. Adding a timeout (-T 5) is a good practice.
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -T 5 -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts
          
      - name: Deploy via SSH and Run Remote Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Increase timeout for the SSH connection (default is 10s)
          timeout: 60s 
          # Ensure strict host key checking is on for security (this is usually the default)
          # script_stop: true # Ensures all commands run before closing the connection
          
          # The remote script to run on the EC2 server
          script: |
            # Set options for robust shell scripting: exit on error, treat unset variables as errors, fail if any part of a pipeline fails
            set -euo pipefail 
            
            # Navigate to the application directory (good practice)
            cd /opt/CelestialAi_app/
            
            # Execute the deployment script
            bash ./deploy.sh
            
            echo "Remote deployment script finished."
